import { BaseResponse } from '../../../../models/responses/base-response.model';
import {
  EditProduct,
  FoodicsAllowedProducts,
  ProductAttribute,
} from '../../../../models/Product/models';
import { Component, OnInit } from '@angular/core';
import { ProductService } from '../../../services/Product/product.service';
import { ActivatedRoute, Router } from '@angular/router';
import {
  FormArray,
  FormBuilder,
  FormControl,
  Validators,
} from '@angular/forms';
import { environment } from 'src/environments/environment';
import { MessageService } from 'primeng/api';
import { Store } from '@ngrx/store';
import { closeLoadingDialog, openLoadingDialog } from 'src/store/loadingSlice';
import { Currency } from 'src/models/User';
import { AuthService } from 'src/app/services/auth.service';
import { Country } from 'src/models/country/model';
import { GetListResponse } from 'src/models/responses/get-response.model';
import { CategoryService } from 'src/app/services/category/category.service';
import { Category } from 'src/models/category/model';

type FormType = {
  name: any;
  name_ar: any;
  standard_price: any;
  purchase_currency_id: any;
  how_to_use: any;
  how_to_use_ar: any;
  direct_redeem_link: any;
  SKU: any;
  expiry_date?: any;
  expiry_period?: any;
  serials_auto_generated?: any;
  value?: any;
  enable_stock_history?: any;
  use_skarla_portal: any;
  product_attributes: any;
  product_specific_attribute?: any;
  product_amount?: any;
  product_currency?: any;
  unlimited?: any;
  foodics_discount_type?: any;
  foodics_discount_amount?: any;
  foodics_is_percent?: any;
  foodics_business_reference?: any;
  foodics_max_discount_amount?: any;
  foodics_include_modifiers?: any;
  foodics_allowed_products?: any;
  foodics_is_discount_taxable?: any;
  netdragon_product_description?: any;
  netdragon_product_category?: any;
  country_id?: any;
  category_id?: any;
};
@Component({
  selector: 'app-edit-product',
  templateUrl: './edit-product.component.html',
  styleUrls: ['./edit-product.component.scss'],
})
export class EditProductComponent implements OnInit {
  submitted: boolean = false;
  productImage: any;
  availableCurrencies: Currency[];
  isExpiryPeriodZero: boolean = true;
  editProductForm = this.formBuilder.group<FormType>({
    name: ['', [Validators.required]],
    name_ar: ['', [Validators.required]],
    country_id: [,],
    standard_price: [0, [Validators.required]],
    purchase_currency_id: [, [Validators.required]],
    how_to_use: ['', [Validators.required]],
    how_to_use_ar: ['', [Validators.required]],
    SKU: ['', Validators.required],
    direct_redeem_link: ['', [Validators.required]],
    category_id: ['', [Validators.required]],
    use_skarla_portal: [false, []],
    product_attributes: this.formBuilder.array([]),
    foodics_allowed_products: this.formBuilder.array([]),
  });
  isBabil =
    localStorage.getItem(environment.CODES_ADDITIONAL_VALUE) === 'secret'
      ? true
      : false;
  codesAdditionalValues: any = localStorage.getItem(
    environment.CODES_ADDITIONAL_VALUE
  );

  // dynamicProductAttributes: FormArray;
  product: EditProduct = {} as EditProduct;
  file: any | undefined;
  imageSelected: boolean = false;
  isPrepaid: boolean = false;
  isSerialsAutoGenerated: boolean = false;
  minDate: Date = new Date();
  maxFileSize = environment.MAX_UPLOADED_FILE_SIZE;
  selectedFile: any[] = [];
  maxFileSizeMessage: string =
    $localize`Max file size ` + this.maxFileSize / 1000000 + $localize`MB`;
  countries: GetListResponse<Country>;
  countriesOptions: Country[] =
    localStorage.getItem(environment.COUNTRIES) != undefined
      ? JSON.parse(localStorage.getItem(environment.COUNTRIES) || '')
      : this.getCountries();
  selectedCountry: Country = {} as Country;
  allCurrencies: Currency[];
  categories: Category[];
  constructor(
    private productService: ProductService,
    private categoryService: CategoryService,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private formBuilder: FormBuilder,
    private messageService: MessageService,
    private readonly store: Store<{}>,
    private authService: AuthService
  ) {}
  netdragonProductCategoryName: string;
  redeemFieldsTypes = [
    { label: $localize`Number`, value: 'number' },
    { label: $localize`Text`, value: 'text' },
    { label: $localize`Boolean`, value: 'boolean' },
  ];

  required = [
    { label: $localize`No`, value: false },
    { label: $localize`Yes`, value: true },
  ];
  foodicsDiscountTypes = [
    { label: $localize`Order Level`, value: '1' },
    { label: $localize`Product Level`, value: '2' },
  ];

  get product_attributes(): FormArray {
    return this.editProductForm.get('product_attributes') as FormArray;
  }
  get foodics_allowed_products(): FormArray {
    return this.editProductForm.get('foodics_allowed_products') as FormArray;
  }
  ngOnInit(): void {
    this.getAllCurrencies();
    this.getCategories();
    this.getCurrencies();
    this.activatedRoute.params.subscribe((id) => {
      let input: number = parseInt(id['id']);
      this.productService.getProductDetails(input).subscribe((res) => {
        this.product = {
          ...res.result.data[0],
          name: this.getProductName(
            res.result.data[0].name,
            res.result.data[0].country_id
          ),
          name_ar: this.getProductName(
            res.result.data[0].name_ar,
            res.result.data[0].country_id
          ),
          netdragon_product_category:
            res.result.data[0].netdragon_product_category.id,
          product_currency: res.result.data[0].product_currency.id,
          purchase_currency_id: res.result.data[0].purchase_currency_id.id,
        };
        this.netdragonProductCategoryName =
          res.result.data[0].netdragon_product_category.name;
        this.fillProductValues(this.product);
        if (this.codesAdditionalValues === 'foodics') {
          this.fillAllowedProductsValues(
            res.result.data[0].foodics_allowed_products
          );
        }
        this.addDynamicAttr(res.result.data[0].product_attributes);
      });
    });
  }
  addAllowedProducts(): void {
    const formRow = this.formBuilder.group({
      product_id: ['', Validators.required],
    });

    this.foodics_allowed_products.push(formRow);
  }
  deleteAllowedProduct(productIndex: number): void {
    this.foodics_allowed_products.removeAt(productIndex);
  }
  fillProductValues(productData: EditProduct) {
    this.isPrepaid = productData.is_prepaid;
    this.isSerialsAutoGenerated = productData.serials_auto_generated;

    this.editProductForm.patchValue({
      how_to_use: productData.how_to_use,
      how_to_use_ar: productData.how_to_use_ar,
      name: productData.name,
      name_ar: productData.name_ar,
      standard_price: productData.standard_price,
      purchase_currency_id: productData.purchase_currency_id,
      SKU: productData.SKU,
      direct_redeem_link: productData.direct_redeem_link,
      use_skarla_portal: productData.use_skarla_portal,
      country_id: productData.country_id,
      category_id: productData.categ_id,
    });
    this.fillDenomenationandCurrency(productData.country_id);
    if (productData.product_specific_attribute === 'topup') {
      this.editProductForm.addControl(
        'product_currency',
        new FormControl(productData.product_currency, [Validators.required])
      );
      this.editProductForm.addControl(
        'netdragon_product_description',
        new FormControl(productData.netdragon_product_description, [])
      );

      this.editProductForm.patchValue({
        product_currency: this.product.product_currency,
        netdragon_product_description:
          this.product.netdragon_product_description,
      });
    }
    if (this.isPrepaid) {
      this.editProductForm.addControl(
        'value',
        new FormControl(productData.value, [Validators.required])
      );
    }
    if (this.isPrepaid || this.isSerialsAutoGenerated) {
      if (this.isBabil) {
        if (productData.expiry_period === 0) {
          this.editProductForm.addControl(
            'unlimited',
            new FormControl(true, [])
          );
          this.editProductForm.addControl(
            'expiry_period',
            new FormControl(0, [Validators.required, Validators.min(1)])
          );

          this.editProductForm.controls.expiry_period?.disable();
          this.isExpiryPeriodZero = true;
        } else {
          this.editProductForm.addControl(
            'expiry_period',
            new FormControl(productData.expiry_period, [
              Validators.required,
              Validators.min(1),
            ])
          );
        }
      } else {
        let expiry_date =
          productData.expiry_date !== null
            ? new Date(productData.expiry_date)
            : '';

        this.editProductForm.addControl(
          'expiry_date',
          new FormControl(
            expiry_date,
            this.isPrepaid ? Validators.required : []
          )
        );
      }
    } else {
      this.editProductForm.addControl(
        'enable_stock_history',
        new FormControl(productData.enable_stock_history, [])
      );
    }
    if (this.codesAdditionalValues === 'foodics') {
      this.addFoodicsFormItemsWithValues();
    }
  }
  onUpload(event: any) {
    let me = this;
    this.product.image;
    let file = event.files[0];
    let reader = new FileReader();

    reader.readAsDataURL(file);
    reader.onload = function () {
      let f = reader.result as string;
      let solution = f.split('base64,');
      let obj = { file: solution[1] };
      me.productImage = obj.file;
      me.imageSelected = true;
    };
  }

  submit() {
    this.submitted = true;
    let value = this.editProductForm.value;
    this.product.name = this.getFullProductName(value.name) as string;
    this.product.name_ar = this.getFullProductName(value.name_ar) as string;
    this.product.standard_price = value.standard_price as number;
    this.product.how_to_use = value.how_to_use as string;
    this.product.how_to_use_ar = value.how_to_use_ar as string;
    this.product.SKU = value.SKU as string;
    this.product.direct_redeem_link = value.direct_redeem_link as string;
    this.product.use_skarla_portal = value.use_skarla_portal as boolean;
    this.product.purchase_currency_id = value.purchase_currency_id as number;
    this.product.categ_id = value.category_id as number;
    if (value.country_id === 0) {
      this.product.country_id = undefined;
    } else {
      this.product.country_id = value.country_id as number;
    }
    this.product.product_attributes =
      value.product_attributes as ProductAttribute[];
    if (this.product.product_specific_attribute === 'topup') {
      this.product.product_currency = this.editProductForm.get(
        'product_currency'
      )?.value as number;

      this.product.netdragon_product_description = this.editProductForm.get(
        'netdragon_product_description'
      )?.value as string;
    } else {
      this.product.netdragon_product_description = '';
    }
    if (this.isPrepaid) {
      this.product.value = this.editProductForm.get('value')?.value as number;
      if (this.isBabil) {
        this.product.expiry_period = this.editProductForm.get('expiry_period')!
          .value as number;
      } else {
        this.product.expiry_date =
          this.editProductForm.get('expiry_date')!.value !== null
            ? (
                this.editProductForm.get('expiry_date')!.value as Date
              ).toLocaleDateString('en-US')
            : '';
        // to get this format mm/dd/yyyy
      }
    } else if (this.isSerialsAutoGenerated) {
      if (this.isBabil) {
        this.product.expiry_period = this.editProductForm.get('expiry_period')!
          .value as number;
      } else {
        const expiryDateControlValue =
          this.editProductForm.get('expiry_date')!.value;
        if (
          expiryDateControlValue !== null &&
          expiryDateControlValue !== undefined &&
          expiryDateControlValue !== ''
        ) {
          this.product.expiry_date = (
            expiryDateControlValue as Date
          ).toLocaleDateString('en-US');
        } else {
          this.product.expiry_date = '';
        }
      }
    } else {
      this.product.enable_stock_history = this.editProductForm.get(
        'enable_stock_history'
      )?.value as boolean;
    }
    if (this.codesAdditionalValues === 'foodics') {
      this.addFoodicsValues();
    } else {
      this.product.foodics_discount_type = '';
      this.product.foodics_business_reference = '';
    }
    this.store.dispatch(openLoadingDialog());

    this.productService
      .editProduct({
        ...this.product,
        image: this.productImage ? this.productImage : this.product.image,
      })
      .subscribe((res: BaseResponse<string>) => {
        if (res.ok) {
          this.store.dispatch(closeLoadingDialog());
          this.messageService.add({
            severity: 'success',
            summary: 'Successful',
            detail: $localize`Your Product Edited Successfully`,
            life: 3000,
          });
          this.router.navigate([
            `dashboard/product/details/${this.product.id}`,
          ]);
        }
      });
  }

  addField(): void {
    const formRow = this.formBuilder.group({
      name: ['', Validators.required],
      type: ['', Validators.required],
      required: ['', Validators.required],
    });

    this.product_attributes.push(formRow);
  }

  deleteField(productIndex: number): void {
    this.product_attributes.removeAt(productIndex);
  }

  addSkarlaRedeemLink() {
    let user = JSON.parse(localStorage.getItem(environment.USER_KEY) ?? '{}');
    let skarlaRedeemLink = `${environment.DASHBOARD_LINK}/en-GB/redeem-page/${user['sp_hash']}/${this.product.SKU}`;
    this.editProductForm.patchValue({
      direct_redeem_link: this.editProductForm.value.use_skarla_portal
        ? skarlaRedeemLink
        : '',
    });
  }

  addDynamicAttr(productAttributes: ProductAttribute[]): void {
    for (const attr of productAttributes) {
      const dynamicAttr = this.formBuilder.group({
        name: [attr.name, Validators.required],
        type: [attr.type, Validators.required],
        required: [attr.required, Validators.required],
      });
      // Get the dynamicArray form array control
      const dynamicArrayControl = this.editProductForm.get(
        'product_attributes'
      ) as FormArray;

      dynamicArrayControl.push(dynamicAttr);
    }
  }
  fillAllowedProductsValues(
    foodicsAllowedProducts: FoodicsAllowedProducts[]
  ): void {
    for (const prod of foodicsAllowedProducts) {
      const dynamicAttr = this.formBuilder.group({
        product_id: [prod.product_id, Validators.required],
      });
      // Get the dynamicArray form array control
      const dynamicArrayControl = this.editProductForm.get(
        'foodics_allowed_products'
      ) as FormArray;

      dynamicArrayControl.push(dynamicAttr);
    }
  }
  getCurrencies() {
    this.authService.getAvailableCurrencies().subscribe((res) => {
      if (res.ok) {
        this.availableCurrencies = res.result.data;
      }
    });
  }
  getCountries() {
    let unspecified_option: Country[] = [
      {
        country_id: 0,
        country_name: 'Not Specified',
        country_currency_id: '',
        country_currency_name: '',
        country_currency_unit: '',
      },
    ];
    this.productService.getCountries().subscribe((res) => {
      if (res.ok) {
        this.countries = res.result;

        this.countriesOptions = unspecified_option.concat(res.result.data);
        localStorage.setItem(
          environment.COUNTRIES,
          JSON.stringify(this.countriesOptions)
        );
      }
      return this.countriesOptions;
    });
  }
  changeLimitState(event: { checked: boolean }): void {
    if (event.checked) {
      this.editProductForm.controls.expiry_period?.patchValue(0);
      this.editProductForm.controls.expiry_period?.disable();
      return;
    }
    this.editProductForm.controls.expiry_period?.enable();
  }
  addFoodicsValues() {
    this.product.foodics_discount_type = this.editProductForm.get(
      'foodics_discount_type'
    )?.value as string;
    this.product.foodics_discount_amount = this.editProductForm.get(
      'foodics_discount_amount'
    )?.value as number;
    this.product.foodics_is_percent = this.editProductForm.get(
      'foodics_is_percent'
    )?.value as boolean;
    this.product.foodics_business_reference = this.editProductForm.get(
      'foodics_business_reference'
    )?.value as string;
    this.product.foodics_max_discount_amount = this.editProductForm.get(
      'foodics_max_discount_amount'
    )?.value as number;
    this.product.foodics_include_modifiers = this.editProductForm.get(
      'foodics_include_modifiers'
    )?.value as boolean;
    this.product.foodics_allowed_products = this.editProductForm.get(
      'foodics_allowed_products'
    )?.value as FoodicsAllowedProducts[];
    this.product.foodics_is_discount_taxable = this.editProductForm.get(
      'foodics_is_discount_taxable'
    )?.value as boolean;
  }
  addFoodicsFormItemsWithValues() {
    this.editProductForm.addControl(
      'foodics_discount_type',
      new FormControl('1', [Validators.required])
    );
    this.editProductForm.addControl(
      'foodics_discount_amount',
      new FormControl(null, [Validators.required])
    );
    this.editProductForm.addControl(
      'foodics_business_reference',
      new FormControl('', [Validators.required])
    );
    this.editProductForm.addControl(
      'foodics_max_discount_amount',
      new FormControl(null, [Validators.required])
    );

    this.editProductForm.addControl(
      'foodics_is_percent',
      new FormControl(false, [Validators.required])
    );

    this.editProductForm.addControl(
      'foodics_include_modifiers',
      new FormControl(false, [Validators.required])
    );

    this.editProductForm.addControl(
      'foodics_is_discount_taxable',
      new FormControl(false, [Validators.required])
    );

    this.editProductForm.addControl(
      'foodics_allowed_products',
      new FormControl([], [])
    );

    this.editProductForm.patchValue({
      foodics_discount_type: this.product.foodics_discount_type,
      foodics_discount_amount: this.product.foodics_discount_amount,
      foodics_is_percent: this.product.foodics_is_percent,
      foodics_business_reference: this.product.foodics_business_reference,
      foodics_max_discount_amount: this.product.foodics_max_discount_amount,
      foodics_include_modifiers: this.product.foodics_include_modifiers,
      foodics_allowed_products: this.product.foodics_allowed_products,
      foodics_is_discount_taxable: this.product.foodics_is_discount_taxable,
    });
  }
  fillDenomenationandCurrency(value: any) {
    this.selectedCountry = this.countriesOptions.filter(
      (obj: Country) => obj.country_id == value
    )[0];
  }
  getAllCurrencies() {
    this.authService.getAllCurrencies().subscribe((res) => {
      if (res.ok) {
        this.allCurrencies = res.result.data;
      }
    });
  }
  getProductName(productName: string, country_id: number): string {
    if (country_id) {
      const lastIndex = productName.lastIndexOf(' ');

      if (lastIndex !== -1) {
        // Split the string into two parts based on the last space
        return productName.substring(0, lastIndex);
      } else {
        return productName;
      }
    } else {
      return productName;
    }
  }
  getFullProductName(name: any) {
    return this.selectedCountry.country_currency_name !== ''
      ? name + ' ' + this.selectedCountry.country_currency_name
      : name;
  }
  getCategories() {
    this.categoryService
      .getCategoryList({ limit: 10000, offset: 0, name: '', id: 0 })
      .subscribe((res) => {
        if (res.ok) {
          this.categories = res.result.data.filter(
            (category) => category.parent_id
          );
        }
      });
  }
}
