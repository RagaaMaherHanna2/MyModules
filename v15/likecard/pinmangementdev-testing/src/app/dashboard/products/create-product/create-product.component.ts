import { BaseResponse } from '../../../../models/responses/base-response.model';
import {
  FoodicsAllowedProducts,
  Product,
  ProductAttribute,
  netDragonParentCategory,
} from 'src/models/Product/models';
import {
  CreateProduct,
  CreateFormType,
} from '../../../../models/Product/models';
import { ProductService } from '../../../services/Product/product.service';
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import {
  FormBuilder,
  Validators,
  FormControl,
  FormArray,
} from '@angular/forms';
import { environment } from 'src/environments/environment';
import { Store } from '@ngrx/store';
import { closeLoadingDialog, openLoadingDialog } from 'src/store/loadingSlice';
import { MessageService } from 'primeng/api';
import { AuthService } from 'src/app/services/auth.service';
import { Currency } from 'src/models/User';
import { Country } from 'src/models/country/model';
import { GetListResponse } from 'src/models/responses/get-response.model';
import { CategoryService } from 'src/app/services/category/category.service';
import { Category } from 'src/models/category/model';

@Component({
  selector: 'app-create-product',
  templateUrl: './create-product.component.html',
  styleUrls: ['./create-product.component.scss'],
})
export class CreateProductComponent {
  productTypes: any[] = [
    { name: 'serial', label: $localize`Voucher`, disabled: false },
    { name: 'prepaid', label: $localize`Prepaid Card`, disabled: false },
  ];
  productSpecificAttributes: any[] = [
    { name: '', label: $localize`` },
    { name: 'topup', label: $localize`Top-Up` },
  ];
  selectedType: any;
  createProductForm = this.formBuilder.group<CreateFormType>({
    name: ['', [Validators.required]],
    name_ar: ['', [Validators.required]],
    country_id: [, []],
    standard_price: [0, [Validators.required]],
    purchase_currency_id: [, [Validators.required]],
    how_to_use: ['', [Validators.required]],
    how_to_use_ar: ['', [Validators.required]],
    direct_redeem_link: ['', [Validators.required]],
    SKU: ['', [Validators.required]],
    type: ['', [Validators.required]],
    specific_attribute: ['', []],
    use_skarla_portal: false,
    product_attributes: this.formBuilder.array([]),
    foodics_allowed_products: this.formBuilder.array([]),
    category_id: ['', [Validators.required]],
  });

  product: CreateProduct = {} as CreateProduct;
  file: any | undefined;
  imageSelected: boolean = false;
  productImage = {};
  minDate = new Date();
  maxFileSize = environment.MAX_UPLOADED_FILE_SIZE;

  maxFileSizeMessage: string =
    $localize`Max file size ` + this.maxFileSize / 1000000 + $localize`MB`;
  VOUCHER_TYPE_ID?: number = -1;
  SKU: string = '';

  availableCurrencies: Currency[];
  allCurrencies: Currency[];
  categories: Category[];
  serialTypes = [
    { label: $localize`Auto generated By Skarla`, value: 'auto_generated' },
    { label: $localize`Uploaded By Excel`, value: 'uploaded' },
  ];
  redeemFieldsTypes = [
    { label: $localize`Number`, value: 'number' },
    { label: $localize`Text`, value: 'text' },
    { label: $localize`Boolean`, value: 'boolean' },
  ];

  required = [
    { label: $localize`No`, value: false },
    { label: $localize`Yes`, value: true },
  ];
  foodicsDiscountTypes = [
    { label: $localize`Order Level`, value: '1' },
    { label: $localize`Product Level`, value: '2' },
  ];

  codesAdditionalValues: any = localStorage.getItem(
    environment.CODES_ADDITIONAL_VALUE
  );
  NetdragonParentCategories: netDragonParentCategory[];
  countries: GetListResponse<Country>;
  countriesOptions: Country[] =
    localStorage.getItem(environment.COUNTRIES) != undefined
      ? JSON.parse(localStorage.getItem(environment.COUNTRIES) || '[]')
      : this.getCountries();

  selectedCountry: Country = {} as Country;

  constructor(
    private productService: ProductService,
    private categoryService: CategoryService,
    private router: Router,
    private formBuilder: FormBuilder,
    private messageService: MessageService,
    private readonly store: Store<{}>,
    private authService: AuthService
  ) {}

  get product_attributes(): FormArray {
    return this.createProductForm.get('product_attributes') as FormArray;
  }
  get foodics_allowed_products(): FormArray {
    return this.createProductForm.get('foodics_allowed_products') as FormArray;
  }
  ngOnInit(): void {
    this.getAllCurrencies();
    this.getCategories();
    if (this.codesAdditionalValues === 'foodics') {
      this.addFoodicsFormItems();
    }
    if (this.codesAdditionalValues === 'net_dragon') {
      this.getNetdragonParentCategories();
    }
  }

  submit() {
    this.store.dispatch(openLoadingDialog());
    let values = this.createProductForm.value;
    this.addCommonProductValues(values);
    switch (this.codesAdditionalValues) {
      case 'net_dragon': {
        if (values.specific_attribute === 'topup') {
          this.addTopupValues();
        }
        break;
      }
      case 'foodics': {
        this.addFoodicsValues();
      }
    }

    switch (values.type) {
      case 'prepaid': {
        this.addPrepaidValues();
        break;
      }
      case 'serial': {
        if (this.product.serials_auto_generated === true) {
          this.addDatesValues();
        }
        break;
      }
    }

    this.callCreateProductApi();
  }

  callCreateProductApi() {
    this.productService
      .createProduct(this.product)
      .subscribe((res: BaseResponse<Product>) => {
        this.store.dispatch(closeLoadingDialog());
        if (res.ok) {
          const productId = res.result.id;
          this.messageService.add({
            severity: 'success',
            summary: $localize`Successful`,
            detail: $localize`Product Created Successfully`,
            life: 3000,
          });
          this.router.navigate([`dashboard/product/details/${productId}`]);
        }
      });
  }
  getCountries() {
    let unspecified_option: Country[] = [
      {
        country_id: 0,
        country_name: 'Not Specified',
        country_currency_id: '',
        country_currency_name: '',
        country_currency_unit: '',
      },
    ];
    this.productService.getCountries().subscribe((res) => {
      if (res.ok) {
        this.countries = res.result;

        this.countriesOptions = unspecified_option.concat(res.result.data);
        localStorage.setItem(
          environment.COUNTRIES,
          JSON.stringify(this.countriesOptions)
        );
      }
      return this.countriesOptions;
    });
  }
  addCommonProductValues(values: any) {
    this.product.name = this.getFullProductName(values.name) as string;
    this.product.name_ar = this.getFullProductName(values.name_ar) as string;

    this.product.standard_price = values.standard_price as number;
    this.product.purchase_currency_id = values.purchase_currency_id;
    this.product.how_to_use = values.how_to_use as string;
    this.product.how_to_use_ar = values.how_to_use_ar as string;
    this.product.SKU = values.SKU as string;
    this.product.direct_redeem_link = values.direct_redeem_link as string;
    this.product.image = this.productImage;
    this.product.is_prepaid = values.type === 'prepaid' ? true : false;
    this.product.use_skarla_portal = values.use_skarla_portal as boolean;
    this.product.serials_auto_generated =
      this.createProductForm.get('serials_auto_generated')?.value ===
      'auto_generated'
        ? true
        : false;
    this.product.categ_id = values.category_id;
    if (this.product.use_skarla_portal === true) {
      this.product.product_attributes =
        values.product_attributes as ProductAttribute[];
    }
    if (values.country_id !== 0) {
      this.product.country_id = values.country_id as string;
    }
  }
  getFullProductName(name: string) {
    return this.selectedCountry.country_currency_name !== ''
      ? name + ' ' + this.selectedCountry.country_currency_name
      : name;
  }
  addFoodicsValues() {
    this.product.foodics_discount_type = this.createProductForm.get(
      'foodics_discount_type'
    )?.value as string;
    this.product.foodics_discount_amount = this.createProductForm.get(
      'foodics_discount_amount'
    )?.value as number;
    this.product.foodics_is_percent = this.createProductForm.get(
      'foodics_is_percent'
    )?.value as boolean;
    this.product.foodics_business_reference = this.createProductForm.get(
      'foodics_business_reference'
    )?.value as string;
    this.product.foodics_max_discount_amount = this.createProductForm.get(
      'foodics_max_discount_amount'
    )?.value as number;
    this.product.foodics_include_modifiers = this.createProductForm.get(
      'foodics_include_modifiers'
    )?.value as boolean;
    this.product.foodics_is_discount_taxable = this.createProductForm.get(
      'foodics_is_discount_taxable'
    )?.value as boolean;
    this.product.foodics_allowed_products = this.createProductForm.get(
      'foodics_allowed_products'
    )?.value as FoodicsAllowedProducts[];
  }
  addFoodicsFormItems() {
    this.createProductForm.addControl(
      'foodics_discount_type',
      new FormControl('1', [Validators.required])
    );
    this.createProductForm.addControl(
      'foodics_discount_amount',
      new FormControl(null, [Validators.required])
    );
    this.createProductForm.addControl(
      'foodics_business_reference',
      new FormControl('', [Validators.required])
    );
    this.createProductForm.addControl(
      'foodics_max_discount_amount',
      new FormControl(null, [Validators.required])
    );

    this.createProductForm.addControl(
      'foodics_is_percent',
      new FormControl(false, [Validators.required])
    );

    this.createProductForm.addControl(
      'foodics_include_modifiers',
      new FormControl(false, [Validators.required])
    );

    this.createProductForm.addControl(
      'foodics_is_discount_taxable',
      new FormControl(false, [Validators.required])
    );

    this.createProductForm.addControl(
      'foodics_allowed_products',
      new FormControl([], [])
    );
  }
  addTopupValues() {
    this.product.product_specific_attribute = this.createProductForm.get(
      'specific_attribute'
    )?.value as string;
    this.product.netdragon_product_category = this.createProductForm.get(
      'netdragon_product_category'
    )?.value as string;
    this.product.netdragon_product_description = this.createProductForm.get(
      'netdragon_product_description'
    )?.value as string;

    this.product.product_amount = this.createProductForm.get('amount')
      ?.value as number;
    this.product.product_currency = this.createProductForm.get('currency')
      ?.value as number;
  }
  addPrepaidFormItems() {
    this.createProductForm.addControl(
      'value',
      new FormControl(null, [Validators['required']])
    );

    this.addDatesFormItems();
  }

  addPrepaidValues() {
    this.product.value = this.createProductForm.get('value')?.value as number;
    this.addDatesValues();
  }
  addDatesFormItems() {
    switch (this.codesAdditionalValues) {
      case 'secret': {
        this.createProductForm.addControl(
          'expiry_period',
          new FormControl(null, [Validators.required])
        );
        break;
      }
      default: {
        this.createProductForm.addControl(
          'expiry_date',
          new FormControl(null, [Validators.required])
        );
        break;
      }
    }
  }
  addDatesValues() {
    switch (this.codesAdditionalValues) {
      case 'secret': {
        this.product.expiry_period = this.createProductForm.get(
          'expiry_period'
        )!.value as number;
        break;
      }
      default: {
        this.product.expiry_date =
          this.createProductForm.get('expiry_date')!.value !== null
            ? (
                this.createProductForm.get('expiry_date')!.value as Date
              ).toLocaleDateString('en-US')
            : '';
        break;
      }
    }
  }
  addSerialFormItems() {
    if (this.product.serials_auto_generated === true) {
      this.addDatesFormItems();
    }
  }

  productTypeSelectionchanged(e: any) {
    switch (e.value) {
      case 'prepaid': {
        this.addPrepaidFormItems();
        this.createProductForm.removeControl('serials_auto_generated');
        break;
      }
      case 'serial': {
        this.createProductForm.removeControl('value');
        this.createProductForm.addControl(
          'serials_auto_generated',
          new FormControl('', [Validators.required])
        );
        switch (this.codesAdditionalValues) {
          case 'secret': {
            this.createProductForm.removeControl('expiry_period');
            break;
          }
          default: {
            this.createProductForm.removeControl('expiry_date');
          }
        }

        break;
      }
    }
  }

  serialTypeSelectionChanged(e: any) {
    if (this.codesAdditionalValues === 'secret') {
      if (e.value === 'auto_generated') {
        this.createProductForm.addControl(
          'expiry_period',
          new FormControl(null, [Validators.required])
        );
      } else {
        this.createProductForm.removeControl('expiry_period');
      }
    } else {
      if (e.value === 'auto_generated') {
        this.createProductForm.addControl(
          'expiry_date',
          new FormControl(null, [])
        );
      } else {
        this.createProductForm.removeControl('expiry_date');
      }
    }
  }
  productSpecificAttributeSelectionchanged(e: any) {
    this.getAvailableCurrencies();
    if (e.value === 'topup') {
      this.productTypes[1].disabled = true;
      this.createProductForm.addControl(
        'netdragon_product_category',
        new FormControl('', [Validators.required])
      );
      this.createProductForm.addControl(
        'netdragon_product_description',
        new FormControl('', [])
      );
      this.createProductForm.addControl(
        'amount',
        new FormControl(0, [Validators.required])
      );
      this.createProductForm.addControl(
        'currency',
        new FormControl('', [Validators.required])
      );
    } else {
      this.productTypes[1].disabled = false;
      this.createProductForm.removeControl('amount');
      this.createProductForm.removeControl('currency');
      this.createProductForm.removeControl('netdragon_product_category');
      this.createProductForm.removeControl('netdragon_product_description');
    }
  }

  updateSkarlaRedeemLink($event: Event) {
    this.SKU = ($event.target as HTMLInputElement).value;
    if (this.createProductForm.value.use_skarla_portal) {
      this.addSkarlaRedeemLink();
    }
  }

  addSkarlaRedeemLink() {
    let user = JSON.parse(localStorage.getItem(environment.USER_KEY) ?? '{}');
    let skarlaRedeemLink = `${environment.DASHBOARD_LINK}/en-GB/redeem-page/${user['sp_hash']}/${this.SKU}`;
    this.createProductForm.patchValue({
      direct_redeem_link: this.createProductForm.value.use_skarla_portal
        ? skarlaRedeemLink
        : '',
    });
  }

  getAvailableCurrencies() {
    this.authService.getAvailableCurrencies().subscribe((res) => {
      if (res.ok) {
        this.availableCurrencies = res.result.data;
      }
    });
  }
  getAllCurrencies() {
    this.authService.getAllCurrencies().subscribe((res) => {
      if (res.ok) {
        this.allCurrencies = res.result.data;
      }
    });
  }

  changeLimitState(event: { checked: boolean }): void {
    if (event.checked) {
      this.createProductForm.controls.expiry_period?.patchValue(0);
      this.createProductForm.controls.expiry_period?.disable();
      return;
    }
    this.createProductForm.controls.expiry_period?.enable();
  }
  addField(): void {
    const formRow = this.formBuilder.group({
      name: ['', Validators.required],
      type: ['', Validators.required],
      required: ['', Validators.required],
    });

    this.product_attributes.push(formRow);
  }
  addAllowedProducts(): void {
    const formRow = this.formBuilder.group({
      product_id: ['', Validators.required],
    });

    this.foodics_allowed_products.push(formRow);
  }

  deleteField(productIndex: number): void {
    this.product_attributes.removeAt(productIndex);
  }
  deleteAllowedProduct(productIndex: number): void {
    this.foodics_allowed_products.removeAt(productIndex);
  }
  onUpload(event: any) {
    let me = this;
    this.product.image = undefined;
    let file = event.files[0];
    let reader = new FileReader();

    reader.readAsDataURL(file);
    reader.onload = function () {
      let f = reader.result as string;
      let solution = f.split('base64,');
      let obj = { file: solution[1] };
      me.productImage = obj['file'];
      me.imageSelected = true;
    };
  }

  onClear() {
    this.imageSelected = false;
  }
  getNetdragonParentCategories() {
    let sp_hash = JSON.parse(
      localStorage.getItem(environment.USER_KEY) ?? '{}'
    )['sp_hash'];
    this.productService
      .getNetdragonProductCategory(sp_hash)
      .subscribe((res) => {
        this.NetdragonParentCategories = res.result.data;
      });
  }
  fillDenomenationandCurrency(event: any) {
    this.selectedCountry = this.countriesOptions.filter(
      (obj: Country) => obj.country_id == event.value
    )[0];
  }
  getCategories() {
    this.categoryService
      .getCategoryList({ limit: 10000, offset: 0, name: '', id: 0 })
      .subscribe((res) => {
        if (res.ok) {
          this.categories = res.result.data.filter(
            (category) => category.parent_id
          );
        }
      });
  }
}
